<?php
/*
* This class will include methods to interact with Twitter OAuth on a User and Application level.
*
* Author: Bob Henley
*/
session_name('twitter-app');

require_once("config/config.php");
use GuzzleHttp\Client;

class Auth {

	protected $auth_client;

	//Contructor that takes a GuzzleHttp client as a parameter and sets the global variable.
	public function __construct() {
		$this->auth_client = new Client(['base_uri' => 'https://api.twitter.com/', 'timeout' => 2.0]);
	}

	//This function will encode the consumer key and consumer secret into a Base64 string for use in OAuth.
	protected function encode_consumer_info() {
		$auth_string = CONSUMER_KEY.":".CONSUMER_SECRET;
		$encoded_auth_string = "Basic ".base64_encode($auth_string);

		return $encoded_auth_string;
	}

	protected function generate_oauth_signature($oauth_consumer_key, $oauth_callback, $oauth_nonce, $oauth_signature_method, $oauth_timestamp) {
		$parameter_string = "oauth_callback=".$oauth_callback."&oauth_consumer_key=".$oauth_consumer_key."&oauth_nonce=".$oauth_nonce."&oauth_signature_method=".$oauth_signature_method."&oauth_timestamp=".$oauth_timestamp."&oauth_version=1.0";
		$signature_base_string = "POST&".urlencode("https://api.twitter.com/oauth/request_token")."&".urlencode($parameter_string);
		$signing_key = urlencode(CONSUMER_SECRET)."&";
		
		$oauth_signature = base64_encode(hash_hmac('sha1', $signature_base_string, $signing_key));
		return $oauth_signature;
	}

	//Function returns the access toekn generated by our Consumer Key and Consumer Secret.
	public function request_app_only_access_token() {
		$response = $this->auth_client->request('POST', "oauth2/token", [
			'body' => 'grant_type=client_credentials',

			'headers' => [
				'User-Agent' => 'twitter-app/1.0',
				'Authorization' => $this->encode_consumer_info(),
				'Content-Type' => 'application/x-www-form-urlencoded;charset=UTF-8',
				'Content-Length' => '29',
				'Accept-Encoding' => 'gzip'
			]
		]);

		$json = json_decode($response->getBody(), true);

		$_SESSION['access_token'] = $json['access_token'];
	}

	public function request_user_auth_request_token() {
		$date = new DateTime();

		$timestamp = $date->getTimestamp();
		$oauth_nonce = urlencode(hash('sha256', $timestamp));
		$oauth_callback = urlencode(CALLBACK_URL);
		$oauth_consumer_key = CONSUMER_KEY;
		$oauth_signature_method = "HMAC-SHA1";

		$oauth_signature = urlencode($this->generate_oauth_signature($oauth_consumer_key, $oauth_callback, $oauth_nonce, $oauth_signature_method, $timestamp));

		$auth_header = 'OAuth oauth_nonce="'.$oauth_nonce.'", oauth_callback="'.$oauth_callback.'", oauth_signature_method="HMAC-SHA1", oauth_timestamp="'.$timestamp.'", oauth_consumer_key="'.$oauth_consumer_key.'", oauth_signature="'.$oauth_signature.'", oauth_version="1.0"';

		echo $auth_header."<br><br>";

		echo $oauth_signature;

		$response = $this->auth_client->request('POST', "oauth/request_token", [
			'headers' => [
				'Authorization' => $auth_header
			]
		]);

		return "Response: ".$response;
	}
}

?>


