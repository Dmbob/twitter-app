<?php
/*
* This class will include methods to interact with Twitter OAuth on a User and Application level.
*
* Author: Bob Henley
*/
session_name('twitter-app');

require_once("config/config.php");
use GuzzleHttp\Client;

class Auth {

	protected $auth_client;
	protected $url = 'https://api.twitter.com/';

	//Contructor that takes a GuzzleHttp client as a parameter and sets the global variable.
	public function __construct() {
		$this->auth_client = new Client(['base_uri' => $this->url, 'timeout' => 2.0]);
	}

	//This function will encode the consumer key and consumer secret into a Base64 string for use in OAuth.
	protected function encode_consumer_info() {
		$auth_string = CONSUMER_KEY.":".CONSUMER_SECRET;
		$encoded_auth_string = "Basic ".base64_encode($auth_string);

		return $encoded_auth_string;
	}

	protected function generate_oauth_signature($url, $oauth_consumer_key, $oauth_callback="", $oauth_nonce, $oauth_signature_method, $oauth_timestamp, $oauth_token="", $oauth_token_secret="", $params="") {
		$oauth_token_str = "";
		$oauth_token_secret_str = "";
		$oauth_callback_str = "";

		if(!empty($oauth_token)) {
			$oauth_token_str = "&oauth_token=".urlencode($oauth_token);
		}

		if(!empty($oauth_token_secret)) {
			$oauth_token_secret_str = $oauth_token_secret;
		}

		if(!empty($oauth_callback)) {
			// /$oauth_callback_str = "oauth_callback=".$oauth_callback."&";
		}

		$params_str = empty($params) ? "" : "&".urlencode($params);

		$parameter_string = $oauth_callback_str.
							"oauth_consumer_key=".$oauth_consumer_key.
							"&oauth_nonce=".$oauth_nonce.
							"&oauth_signature_method=".$oauth_signature_method.
							"&oauth_timestamp=".$oauth_timestamp.
							$oauth_token_str.
							"&oauth_version=1.0".
							$params_str;

		$signature_base_string = "POST&".urlencode($url)."&".urlencode($parameter_string);
		$signing_key = urlencode(CONSUMER_SECRET)."&".urlencode($oauth_token_secret_str);

		echo $signature_base_string."<br><br>";
		
		$oauth_signature = base64_encode(hash_hmac('sha1', $signature_base_string, $signing_key, true));
		return $oauth_signature;
	}

	public function generate_auth_header($url, $oauth_token="", $oauth_token_secret="", $params="") {
		$date = new DateTime();

		$timestamp = $date->getTimestamp();
		$oauth_nonce = hash('sha256', $timestamp);
		$oauth_callback = CALLBACK_URL;
		$oauth_consumer_key = CONSUMER_KEY;
		$oauth_signature_method = "HMAC-SHA1";
		$oauth_user_token = $oauth_token;
		$oauth_user_secret = $oauth_token_secret;

		$oauth_signature = urlencode($this->generate_oauth_signature(
			$url, 
			urlencode($oauth_consumer_key), 
			urlencode($oauth_callback), 
			urlencode($oauth_nonce), 
			urlencode($oauth_signature_method), 
			urlencode($timestamp),
			$oauth_user_token,
			$oauth_user_secret,
			$params
		));

		$oauth_user_token_str = empty($oauth_user_token) ? "" : ', oauth_token="'.$oauth_user_token.'"';

		$auth_header = 'OAuth oauth_nonce="'.$oauth_nonce.', oauth_signature_method="HMAC-SHA1", oauth_timestamp="'.$timestamp.'", oauth_consumer_key="'.$oauth_consumer_key.'", oauth_signature="'.$oauth_signature.'"'.$oauth_user_token_str.', oauth_version="1.0"';

		echo $auth_header."<br><br>";
		return $auth_header;
	}

	//Function returns the access toekn generated by our Consumer Key and Consumer Secret.
	public function request_app_only_access_token() {
		$response = $this->auth_client->request('POST', "oauth2/token", [
			'body' => 'grant_type=client_credentials',

			'headers' => [
				'User-Agent' => 'twitter-app/1.0',
				'Authorization' => $this->encode_consumer_info(),
				'Content-Type' => 'application/x-www-form-urlencoded;charset=UTF-8',
				'Content-Length' => '29',
				'Accept-Encoding' => 'gzip'
			]
		]);

		$json = json_decode($response->getBody(), true);

		$_SESSION['access_token'] = $json['access_token'];
	}

	public function request_user_auth_request_token() {
		$response = $this->auth_client->request('POST', "oauth/request_token", [
			'headers' => [
				'Authorization' => $this->generate_auth_header("https://api.twitter.com/oauth/request_token")
			]
		]);

		$data = $response->getBody();

		$_SESSION["oauth_user_token_secret"] = explode('=', explode('&', $data)[1])[1];

		return explode('=', explode('&', $data)[0])[1];
	}

	public function request_user_access_token($oauth_token, $oauth_verifier) {
		$response = $this->auth_client->request('POST', 'oauth/access_token?oauth_verifier='.$oauth_verifier, [
			'headers' => [
				'Authorization' => $this->generate_auth_header($this->url, $oauth_token, "", "oauth_verifier=".$oauth_verifier)
			]
		]);

		return $response->getBody();
	}
}

?>